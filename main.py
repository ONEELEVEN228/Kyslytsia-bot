import logging
import os
import openai
import telebot
from telebot.apihelper import ApiException

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á—ñ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    logging.warning("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ TELEGRAM_TOKEN –∞–±–æ OPENAI_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    TELEGRAM_TOKEN = TELEGRAM_TOKEN or 'placeholder_token'
    OPENAI_API_KEY = OPENAI_API_KEY or 'placeholder_key'

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OpenAI —Ç–∞ Telegram
openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_TOKEN)

def ask_gpt(question: str) -> str:
    if OPENAI_API_KEY == 'placeholder_key':
        return "‚ùå OpenAI –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω–æ. –î–æ–¥–∞–π OPENAI_API_KEY —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."

    prompt = (
        "–¢–∏ ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —Ä–∏–±–æ–ª–æ–≤–ª—ñ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {question}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:"
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=400
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        logging.error(f"OpenAI API error: {e}")
        return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ OpenAI. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

@bot.message_handler(commands=['start'])
def start_handler(message):
    text = (
        "üé£ –ü—Ä–∏–≤—ñ—Ç! –Ø Kyslytsia Bot ‚Äì —Ç–≤—ñ–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —Ä–∏–±–æ–ª–æ–≤–ª—ñ.\n"
        "–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "- –Ø–∫—É –ø—Ä–∏–º–∞–Ω–∫—É –≤–∑—è—Ç–∏ –Ω–∞ —â—É–∫—É?\n"
        "- –Ø–∫ –ª–æ–≤–∏—Ç–∏ —Å—É–¥–∞–∫–∞ –Ω–∞ –¥–∂–∏–≥?"
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: True)
def message_handler(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        reply = ask_gpt(message.text)
        bot.send_message(message.chat.id, reply)
    except ApiException as e:
        logging.error(f"Telegram API error: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Telegram API.")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.")

if __name__ == "__main__":
    try:
        bot.remove_webhook()
        logging.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    try:
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        bot.infinity_polling()
    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ polling: {e}")
