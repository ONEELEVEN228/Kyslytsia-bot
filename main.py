import os
import logging
import openai
import telebot

# –õ–æ–≥–∏ –¥–ª—è Railway
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ TELEGRAM_TOKEN –∞–±–æ OPENAI_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –í—ñ—Ç–∞–Ω–Ω—è
@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø Kyslytsia Bot ‚Äì —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ —Ä–∏–±–æ–ª–æ–≤–ª—ñ. üé£\n\n–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "- –Ø–∫—É –ø—Ä–∏–º–∞–Ω–∫—É –≤–∑—è—Ç–∏ –Ω–∞ —â—É–∫—É?\n"
        "- –Ø–∫ –ª–æ–≤–∏—Ç–∏ —Å—É–¥–∞–∫–∞ –Ω–∞ –¥–∂–∏–≥?"
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        bot.send_chat_action(message.chat.id, "typing")
        prompt = (
            "–¢–∏ ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —Ä–∏–±–æ–ª–æ–≤–ª—ñ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏. "
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {message.text}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:"
        )

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ú–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ gpt-4, —è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=400
        )

        answer = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, answer)

    except openai.error.OpenAIError as e:
        logger.error("‚ùå OpenAI API error: %s", str(e))
        bot.send_message(message.chat.id, "–í–∏–±–∞—á, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —ñ–∑ OpenAI. üôÅ")

    except telebot.apihelper.ApiTelegramException as e:
        logger.error("‚ùå Telegram API error: %s", str(e))
        bot.send_message(message.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ Telegram API. üßØ")

    except Exception as e:
        logger.error("‚ùå Unexpected error: %s", str(e))
        bot.send_message(message.chat.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üò•")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ Kyslytsia Bot —Å—Ç–∞—Ä—Ç—É—î...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=10)
    except Exception as e:
        logger.critical("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–∏–≤—Å—è —á–µ—Ä–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É: %s", str(e))
